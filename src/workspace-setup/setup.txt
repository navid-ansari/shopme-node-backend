Steps and commands to create react app
--npx create-react-app app-name(in small case)
npx on the first line is not a typo — it’s a package runner tool that comes with npm 5.2+
npx doesnt' actually downloads the react installer it just uses it for project initialization unlike npm.
npm downloads it in local environment.

MERN Application Development
A)Setup
1- npm init in a blank folder. set entry file name as server.js
2- create folders named backend and frontend
3- inside backend folder, create file server.js
4- install express Js with command npm install express
5- configure express in server.js file
6- In package.json file of root folder, add command "start": "node usmr-backend/server.js" under script property to run our node app with npm start command.
7- In root folder, run command "npm install dotenv" to identify and run .env file.
8- create .env file with PORT=5000
9- Run command "npm install nodemon" for live reloading. Modify root package.json's start command with "start": "nodemon usmr-backend/server.js"
10- Move .gitignore from frontend folder to root folder and add node_modules, usmr-frontend/node_modules and .env
11- Now both frontend and backend can be served on their respective ports independently.
12- Now we need to connect our backend to our front end so that front end can communicate with backend and fetch
the re required data. Below are the steps.
    a-In frontend, Install => "npm install axios".
    b-In frontend package.json, add "proxy": "http://127.0.0.1:5000/", to remove CORS error and proxy our request.
    c-Now we need to run our frontend and backend with single command. Install "npm install concurrently" in root folder.
    d-Now in root package.json under script property, add "client": "npm start --prefix usmr-frontend" and "dev": "concurrently \"npm start\" \"npm run client\""
    command.
    e-Now we can run "npm run dev" to concurrently run both frontend and backend in one command.
13- Now we need to connect MongoDB to NodeJs.
    a-npm install mongoose and configure mongodb as per documentation.   

C)React Terminologies
1- <></> => fragment
2-Types of components
    a-function based component
    b-class based component
3-JSX => HTML combined with Javascript for dynamic templates.
    a-class will be replaced with className in JSX.
    b-for will be replaced by htmlFor in JSX.
    c-always return one html element in JSX. Multiple elements can be added inside the main parent element. We can
    use react fragment to enclose multiple elements.
4-Props => Props stands for Properties. Props is a collection of properties passed to the common component.props are read only values, never ever change them
props can be sent via properties in the components. It can be sent single value or in the form of group of values(object).
IMP: Props are Read-Only => Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function
function sum(a, b) {
  return a + b;
}
Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.

In contrast, this function is impure because it changes its own input:
function withdraw(account, amount) {
  account.total -= amount;
}
React is pretty flexible but it has a single strict rule:
All React components must act like pure functions with respect to their props.

example of prop is as Below
option 1 => <Header name="'Header Text'" icon=""/>  
5- Named exports & default exports =>    

6-React Router
npm install react-router-dom => v6
then import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";
add routes 
<Routes>
  <Route path="/sign-in" element={<SignIn />}></Route>
  <Route path="/sign-up" element={<SignUp />}></Route>
  <Route path="/" element={<Home />}></Route>
</Routes>
In navigation link, use
<li className="nav-item">
  <Link className="nav-link active" aria-current="page" to="/">Home</Link>
</li>
<li className="nav-item">
  <Link className="nav-link" to="/sign-in">Sign In</Link>
</li>
<li className="nav-item">
  <Link className="nav-link" to="/sign-up">Sign Up</Link>
</li>

7-state and event handling
Hooks => Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
Types of hook => state hook

8-controlled vs uncontrolled components

9-Class-based components have access to the lifecycle functions like componentWillMount(), componentDidMount(),
componentWillReceiveProps(),componentWillUpdate(), shouldComponentUpdate(),render() and componentWillUnmount().
These lifecycle functions are called at different stages of the lifecycle and are used for a variety of purposes
like changing the state or doing some work (like fetching data from an external API). They are also referred to as
lifecycle hooks. 

Bad Code Practices
1- Rigid Code
code with so many dependencies(bad dependencies) that snake out in so many directions that you cannot make any change without changing
everything around it.

2- Fragile code
tendency of the code to brake at many places even when you make changes to one place.

Schema vs Model in Mongoose(mongoDB)
A schema is fundamentally describing the data construct of a document (in MongoDB collection). This schema defines the 
name of each item of data, and the type of data, whether it is a string, number, date, Boolean, and so on.
A model is a compiled version of the schema. One instance of the model will map to one document in the database. It is
the model that handles the reading, creating, updating, and deleting of documents.